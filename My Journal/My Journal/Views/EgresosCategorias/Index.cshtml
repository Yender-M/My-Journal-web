@model IEnumerable<My_Journal.Models.EgresosCategoria.EgresoCategoria>

@{
    ViewData["Title"] = "Egresos Categorias";
}
<link href="/theme-assets/css/index_style.css" rel="stylesheet" />

<style>
    .label {
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        color: #394a56;
    }

    .label-text {
        margin-left: 16px;
        font-weight: 600;
        transition: color 0.3s ease;
    }

    .toggle {
        isolation: isolate;
        position: relative;
        height: 30px;
        width: 60px;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: -8px -4px 8px 0px #ffffff, 8px 4px 12px 0px #d1d9e6, 4px 4px 4px 0px #d1d9e6 inset, -4px -4px 4px 0px #ffffff inset;
    }

    .toggle-state {
        display: none;
    }

    .indicator {
        height: 100%;
        width: 200%;
        background: #ecf0f3;
        border-radius: 15px;
        transform: translate3d(-75%, 0, 0);
        transition: transform 0.4s cubic-bezier(0.85, 0.05, 0.18, 1.35), background-color 0.3s ease;
        box-shadow: -8px -4px 8px 0px #ffffff, 8px 4px 12px 0px #d1d9e6;
    }

    .toggle-state:checked ~ .indicator {
        transform: translate3d(25%, 0, 0);
        background-color: #006400;
    }
</style>

<a asp-controller="EgresosCategoriasCreate" asp-action="Index" title="" class="btn btn-lg btn-primary box-shadow--4dp">Crear registro</a>
<br />

<div class="container" style="margin-top:30px;">
    <table id="example" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.Nombre)</th>
                <th>@Html.DisplayNameFor(model => model.Descripcion)</th>
                <th>@Html.DisplayNameFor(model => model.Estado)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Nombre)</td>
                    <td>@Html.DisplayFor(modelItem => item.Descripcion)</td>
                    <td>
                        @if (item.Estado == 0)
                        {
                            <span>Inactivo</span>
                        }
                        else
                        {
                            <span>Activo</span>
                        }
                    </td>
                    <td>
                        <a class="btn launch btnEditar"
                           data-toggle="modal"
                           data-target="#modalEditarEgreso"
                           data-id="@item.IdCatEgreso"
                           data-nombre="@item.Nombre"
                           data-descripcion="@item.Descripcion"
                           data-estado="@item.Estado">
                            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                        </a>
                        <button class="btn btn-launch"
                                data-egreso-id="@item.IdCatEgreso"
                                data-egreso-nombre="@item.Nombre"
                                onclick="confirmDeleteEgreso(this)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- MODAL DE EDICIÓN PARA EGRESOS CATEGORIAS -->
<div class="modal fade" id="modalEditarEgreso" tabindex="-1" aria-labelledby="modalEgresoLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 600px; width: 90vw;">
        <div class="modal-content">
            <form asp-action="Editar" method="post" class="form" id="formEditarEgreso">
                @Html.AntiForgeryToken()

                <div class="modal-header">
                    <h5 class="modal-title">Editar - <span id="modalEgresoNombre"></span></h5>
                    <button type="button" class="btn-close" data-dismiss="modal"></button>
                </div>
                <div class="modal-body">

                    <input type="hidden" id="EditIdCatEgreso" name="IdCatEgreso" />

                    <div class="form-group">
                        <label>Nombre</label>
                        <input id="EditNombre" name="Nombre" class="form-control" />
                    </div>
                    <div class="form-group mt-3">
                        <label>Descripción</label>
                        <input id="EditDescripcion" name="Descripcion" class="form-control" />
                    </div>

                    <!-- TOGGLE DE ESTADO PARA EGRESOS CATEGORIAS -->
                    <label class="label mt-3">
                        <div class="toggle">
                            <input class="toggle-state" id="estadoCheckEgreso" name="Estado" type="checkbox" />
                            <div class="indicator"></div>
                        </div>
                        <div class="label-text" id="estadoLabelEgreso">No activo</div>
                    </label>

                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="/theme-assets/js/Datatable.js"></script>
    <script>
        const estadoCheckEgreso = document.getElementById("estadoCheckEgreso");
        const estadoLabelEgreso = document.getElementById("estadoLabelEgreso");
        const toggleContainerEgreso = document.querySelector('#modalEditarEgreso .toggle');

        $(document).on('click', '.btnEditar', function () {
            var btn = $(this);
            $("#EditIdCatEgreso").val(btn.data("id"));
            $("#EditNombre").val(btn.data("nombre"));
            $("#EditDescripcion").val(btn.data("descripcion"));
            $("#modalEgresoNombre").text(btn.data("nombre"));

            var estado = btn.data("estado");
            const isActive = estado === true || estado === "True" || estado === "true" || estado == 1;

            $("#estadoCheckEgreso").prop("checked", isActive);

            if (isActive) {
                estadoLabelEgreso.textContent = "Activo";
                estadoLabelEgreso.style.color = "#006400"; // Verde
            } else {
                estadoLabelEgreso.textContent = "No activo";
                estadoLabelEgreso.style.color = "#394a56"; // Gris estándar
                toggleContainerEgreso.style.backgroundColor = "#ecf0f3"; // Fondo estándar
            }
        });

        estadoCheckEgreso.addEventListener("change", function () {
            if (estadoCheckEgreso.checked) {
                estadoLabelEgreso.textContent = "Activo";
                estadoLabelEgreso.style.color = "#006400"; // Verde
            } else {
                estadoLabelEgreso.textContent = "No activo";
                estadoLabelEgreso.style.color = "#394a56"; // Gris estándar
                toggleContainerEgreso.style.backgroundColor = "#ecf0f3"; // Fondo estándar
            }
        });

        $(document).ready(function () {
            $('#formEditarEgreso').submit(function (e) {
                e.preventDefault();

                const token = $('input[name="__RequestVerificationToken"]').val();

                const data = {
                    __RequestVerificationToken: token,
                    IdCatEgreso: $('#EditIdCatEgreso').val(),
                    Nombre: $('#EditNombre').val(),
                    Descripcion: $('#EditDescripcion').val(),
                    Estado: $('#estadoCheckEgreso').is(':checked') ? 1 : 0
                };

                $.ajax({
                    type: 'POST',
                    url: '/EgresosCategorias/Edit',
                    data: data,
                    success: function (response) {
                        if (response.success) {
                            $('#modalEditarEgreso').modal('hide');
                            Swal.fire({
                                icon: 'success',
                                title: '¡Guardado!',
                                text: response.message,
                                timer: 2000,
                                showConfirmButton: true
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message
                            });
                        }
                    },
                    error: function (xhr) {
                        let msg = "Ocurrió un error inesperado.";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            msg = xhr.responseJSON.message;
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: msg
                        });
                    }
                });
            });
        });

        function confirmDeleteEgreso(button) {
            const egresoId = button.getAttribute('data-egreso-id');
            const egresoNombre = button.getAttribute('data-egreso-nombre');
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: "btn btn-success",
                    cancelButton: "btn btn-danger"
                },
                buttonsStyling: false
            });

            swalWithBootstrapButtons.fire({
                title: "¿Estás seguro?",
                text: `Estás a punto de eliminar la categoría de egreso "${egresoNombre}". ¡Esta acción no se puede deshacer!`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "No, cancelar",
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = document.createElement("form");
                    form.method = "POST";
                    form.action = `/EgresosCategorias/Delete/${egresoId}`;

                    const antiForgeryInput = document.createElement("input");
                    antiForgeryInput.type = "hidden";
                    antiForgeryInput.name = "__RequestVerificationToken";
                    antiForgeryInput.value = token;

                    form.appendChild(antiForgeryInput);
                    document.body.appendChild(form);
                    form.submit();
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelado",
                        text: "La categoría no fue eliminada.",
                        icon: "error"
                    });
                }
            });
        }

    </script>
}
